class Game{
    field Ship square;
    field int direction;    //Current direction is represented by 0=none, 1=up, 2=down, 3=left, 4=right

    constructor Game new() {
        let square = Ship.new(100, 207);        //Initial position of the ship
        let direction = 0;                      //Stationary direction as init
        return this;
    }

    method void dispose(){
        do square.dispose();
        do Memory.deAlloc();
        return;
    }

    method void moveShip(){                     //Method used for the directions of the sip received by input
        if (direction = 1){ do square.moveUp(); }
        if (direction = 2){ do square.moveDown(); }
        if (direction = 3){ do square.moveLeft(); }
        if (direction = 4){ do square.moveRight(); }

        do Sys.wait(50);
        return;
    }

    method void run(){                          //Principal method that allows us to run the program
        var char key;
        var boolean exit;                       //This will helps us to quit the game if the user wants to
        let exit = false;

        while(~exit){                           //Loop that keeps on the game
            while (key = 0){                    //Loop that makes the ship moves on stationary direction until a key is pressed
                let key = Keyboard.keyPressed();
                do moveShip();
            }
            if (key = 81) { let exit = true; }              //Q Key for quitting the game
            if (key = 67) { do square.shield(); }           //C Key for shield
            if (key = 66) { do square.shoot(); }            //B Key for shoot
            if (key = 131) { let direction = 1; }           //Up Arrow for direction
            if (key = 133) { let direction = 2; }           //Left Arrow for direction
            if (key = 130) { let direction = 3; }           //Right Arrow for direction
            if (key = 132) { let direction = 4; }           //Down Arrow for direction

            while (~(key = 0)){                             //Loop that makes monitoring about keeping the key pressed
                let key = Keyboard.keyPressed();
                do moveShip();
            }
        }
        return;
    }
}