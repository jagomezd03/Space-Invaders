class Ship{
    field int x,y;
    field int size;

    constructor Ship new (int sX, int sY){       //Method to create the ship
        let x = sX;
        let y = sY;
        do drawShip();
        return this;
    }
    method void dispose(){                                  //Base method to dispose memory
        do Memory.deAlloc(this);
        return;
    }
    method void drawShip(){                                     //Method to draw the ship        
        do Screen.setColor(true);                               //We select black so we are able to draw the ship
        do Screen.drawLine(x + 7, y, x + 7, y + 3);             //We divided the model in sections so it will be easy
        do Screen.drawPixel(x + 8, y);                          //U can found the model on the documentation
        do Screen.drawLine(x + 9, y, x + 9, y + 3);
        do Screen.drawLine(x + 6, y + 3, x + 6, y + 8);
        do Screen.drawLine(x + 10, y + 3, x + 10, y + 8);
        do Screen.drawLine(x + 3, y + 7, x + 5, y + 7);
        do Screen.drawLine(x + 11, y + 7, x + 13, y + 7);
        do Screen.drawLine(x + 5, y + 8, x + 5, y + 9);
        do Screen.drawLine(x + 11, y + 8, x + 11, y + 9);
        do Screen.drawLine(x + 3, y + 8, x + 3, y + 11);
        do Screen.drawLine(x, y + 9, x + 2, y + 9);
        do Screen.drawLine(x + 13, y + 8, x + 13, y + 11);
        do Screen.drawLine(x + 14, y + 9, x + 16, y + 9);
        do Screen.drawLine(x + 2, y + 10, x + 2, y + 12);
        do Screen.drawLine(x + 14, y + 10, x + 14, y + 12);
        do Screen.drawLine(x + 8, y + 11, x + 8, y + 12);
        do Screen.drawLine(x + 7, y + 12, x + 7, y + 13);
        do Screen.drawLine(x + 9, y + 12, x + 9, y + 13);
        do Screen.drawLine(x, y + 10, x, y + 20);
        do Screen.drawLine(x + 16, y + 10, x + 16, y + 20);
        do Screen.drawLine(x + 1, y + 20, x + 2, y + 20);
        do Screen.drawLine(x + 14, y + 20, x + 15, y + 20);
        do Screen.drawLine(x + 5, y + 18, x + 7, y + 18);
        do Screen.drawLine(x + 9, y + 18, x + 11, y + 18);
        do Screen.drawLine(x + 7, y + 18, x + 7, y + 22);
        do Screen.drawLine(x + 9, y + 18, x + 9, y + 22);
        do Screen.drawLine(x + 8, y + 21, x + 8, y + 22);
        do Screen.drawPixel(x + 2, y + 19);
        do Screen.drawPixel(x + 3, y + 18);
        do Screen.drawPixel(x + 4, y + 17);
        do Screen.drawPixel(x + 12, y + 17);
        do Screen.drawPixel(x + 13, y + 18);
        do Screen.drawPixel(x + 14, y + 19);
        return;
    }
    method void eraseShip(){                                //Method to erase the ship
        do Screen.setColor(false);                          //We assign white to the color so we can erase                     
        do Screen.drawLine(x + 7, y, x + 7, y + 3);         //So we just copy and paste the code of drawShip
        do Screen.drawPixel(x + 8, y);                      //and just change the color to white
        do Screen.drawLine(x + 9, y, x + 9, y + 3);
        do Screen.drawLine(x + 6, y + 3, x + 6, y + 8);
        do Screen.drawLine(x + 10, y + 3, x + 10, y + 8);
        do Screen.drawLine(x + 3, y + 7, x + 5, y + 7);
        do Screen.drawLine(x + 11, y + 7, x + 13, y + 7);
        do Screen.drawLine(x + 5, y + 8, x + 5, y + 9);
        do Screen.drawLine(x + 11, y + 8, x + 11, y + 9);
        do Screen.drawLine(x + 3, y + 8, x + 3, y + 11);
        do Screen.drawLine(x, y + 9, x + 2, y + 9);
        do Screen.drawLine(x + 13, y + 8, x + 13, y + 11);
        do Screen.drawLine(x + 14, y + 9, x + 16, y + 9);
        do Screen.drawLine(x + 2, y + 10, x + 2, y + 12);
        do Screen.drawLine(x + 14, y + 10, x + 14, y + 12);
        do Screen.drawLine(x + 8, y + 11, x + 8, y + 12);
        do Screen.drawLine(x + 7, y + 12, x + 7, y + 13);
        do Screen.drawLine(x + 9, y + 12, x + 9, y + 13);
        do Screen.drawLine(x, y + 10, x, y + 20);
        do Screen.drawLine(x + 16, y + 10, x + 16, y + 20);
        do Screen.drawLine(x + 1, y + 20, x + 2, y + 20);
        do Screen.drawLine(x + 14, y + 20, x + 15, y + 20);
        do Screen.drawLine(x + 5, y + 18, x + 7, y + 18);
        do Screen.drawLine(x + 9, y + 18, x + 11, y + 18);
        do Screen.drawLine(x + 7, y + 18, x + 7, y + 22);
        do Screen.drawLine(x + 9, y + 18, x + 9, y + 22);
        do Screen.drawLine(x + 8, y + 21, x + 8, y + 22);
        do Screen.drawPixel(x + 2, y + 19);
        do Screen.drawPixel(x + 3, y + 18);
        do Screen.drawPixel(x + 4, y + 17);
        do Screen.drawPixel(x + 12, y + 17);
        do Screen.drawPixel(x + 13, y + 18);
        do Screen.drawPixel(x + 14, y + 19);
        return;
    }
    method void shoot(){                                    //Method used for the shots of the ship TEMPORAL:Increase size method
        
        return;
    }
    method void shield(){                                   //Shield for the ship method
        if (size > 2){                                      //TEMPORAL: Decrease size
            do eraseShip();                                 //First we erase
            let size = size - 2;
            do drawShip();                                  //Then we draw
        }
        return;
    }
    method void moveUp(){                                   //Method used to managed input from the user using upArrow
        if (y>207){
            do eraseShip();
            let y = y - 2;
            do drawShip();
        }
        return;
    }
    method void moveDown(){                                 //Method used to managed input from the user using downArrow
        if (y<233){
            do eraseShip();
            let y = y + 2;
            do drawShip();
        }
        return;
    }
    method void moveLeft(){                                 //Method used to managed input from the user using leftArrow
        if (x>1){
            do eraseShip();
            let x = x - 2;
            do drawShip();
        }
        return;
    }
    method void moveRight(){                                //Method used to managed input from the user using rightArrow
        if (x<494){
            do eraseShip();
            let x = x + 2;
            do drawShip();
        }
        return;
    }
}