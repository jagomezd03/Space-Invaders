class Ship{
    field int x, y, s, addr, aux;
    field Game parentGame;          //Variable to manage bullet
    field int width, height;

    constructor Ship new (int sX, int sY, Game aGame){       //Method to create the ship
        let x = sX;
        let y = sY;
        let width = 16;
        let height = 16;
        let parentGame = aGame;
        return this;
    }
    
    method void dispose(){                                  //Base method to dispose memory
        do Memory.deAlloc(this);
        return;
    }

    method void drawShip(){                                     //Method to draw the ship
        let s = y * 32;
        let addr = 16384 + s + (x/16);
        do Memory.poke(addr, 960);
        do Memory.poke(addr + 32, 576);
        do Memory.poke(addr + 64, 576);
        do Memory.poke(addr + 96, 1632);
        do Memory.poke(addr + 128, 1056);
        do Memory.poke(addr + 160, 1056);
        do Memory.poke(addr + 192, 1056);
        do Memory.poke(addr + 224, 15420);
        do Memory.poke(addr + 256, 11316);
        do Memory.poke(addr + 288, -5737);
        do Memory.poke(addr + 320, -7225);
        do Memory.poke(addr + 352, -15805);
        do Memory.poke(addr + 384, -14317);
        do Memory.poke(addr + 416, -27031);
        do Memory.poke(addr + 448, -23995);
        do Memory.poke(addr + 480, -15421);
        return;
    }
    method void eraseShip(){                                //Method to erase the ship
        let s = y * 32;
        let addr = 16384 + s + (x/16);
        do Memory.poke(addr, 0);
        do Memory.poke(addr + 32, 0);
        do Memory.poke(addr + 64, 0);
        do Memory.poke(addr + 96, 0);
        do Memory.poke(addr + 128, 0);
        do Memory.poke(addr + 160, 0);
        do Memory.poke(addr + 192, 0);
        do Memory.poke(addr + 224, 0);
        do Memory.poke(addr + 256, 0);
        do Memory.poke(addr + 288, 0);
        do Memory.poke(addr + 320, 0);
        do Memory.poke(addr + 352, 0);
        do Memory.poke(addr + 384, 0);
        do Memory.poke(addr + 416, 0);
        do Memory.poke(addr + 448, 0);
        do Memory.poke(addr + 480, 0);
        return;
    }

    method void moveUp(){                                   //Method used to managed input from the user using upArrow
        if (y>188){
            do eraseShip();
            let y = y - 4;
            do drawShip();
        }
        return;
    }

    method void moveDown(){                                 //Method used to managed input from the user using downArrow
        if (y<220){
            do eraseShip();
            let y = y + 4;
            do drawShip();
        }
        return;
    }

    method void moveLeft(){                                 //Method used to managed input from the user using leftArrow
        if (x>111){
            do eraseShip();
            let x = x - 16;
            do drawShip();
        }
        return;
    }
    
    method void moveRight(){                                //Method used to managed input from the user using rightArrow
        if (x<497){
            do eraseShip();
            let x = x + 16;
            do drawShip();
        }
        return;
    }

    method void shoot(){
        //Ship's width is 16. Bullet's width (from Bullet.jack) is 2.
        //So, x + (ship.width / 2) - (bullet.width / 2) = x + (16/2) - (2/2) = x + 8 - 1 = x + 7
        var int bulletStartX, bulletStartY;
        let bulletStartX = x + 7;
        let bulletStartY = y; //Starting at the top of the ship
        //The bullet moves upwards, so yVelocity is negative (e.g., -5 pixels per frame)
        do parentGame.addPlayerBullet(Bullet.new(bulletStartX, bulletStartY, 0, -5));
        return;
    }

    method int getX(){
        return x;
    }

    method int getY(){
        return y;
    }

    method int getWidth(){
        return width;
    }

    method int getHeight(){
        return height;
    }

    method void takeDamage(){
        do eraseShip();
        return;
    }

    method void shield(){
        return;
    }
}