class Ship{
    field int x, y, s, addr, aux;

    constructor Ship new (int sX, int sY){       //Method to create the ship
        let x = sX;
        let y = sY;
        do drawShip();
        return this;
    }
    
    method void dispose(){                                  //Base method to dispose memory
        do Memory.deAlloc(this);
        return;
    }

    method void drawShip(){                                     //Method to draw the ship
        let s = y * 32;
        let addr = 16384 + s + (x/16);
        do Memory.poke(addr, 960);
        do Memory.poke(addr + 32, 576);
        do Memory.poke(addr + 64, 576);
        do Memory.poke(addr + 96, 1632);
        do Memory.poke(addr + 128, 1056);
        do Memory.poke(addr + 160, 1056);
        do Memory.poke(addr + 192, 1056);
        do Memory.poke(addr + 224, 15420);
        do Memory.poke(addr + 256, 11316);
        do Memory.poke(addr + 288, -5737);
        do Memory.poke(addr + 320, -7225);
        do Memory.poke(addr + 352, -15805);
        do Memory.poke(addr + 384, -14317);
        do Memory.poke(addr + 416, -27031);
        do Memory.poke(addr + 448, -23995);
        do Memory.poke(addr + 480, -15421);
        return;
    }
    method void eraseShip(){                                //Method to erase the ship
        let s = y * 32;
        let addr = 16384 + s + (x/16);
        do Memory.poke(addr, 0);
        do Memory.poke(addr + 32, 0);
        do Memory.poke(addr + 64, 0);
        do Memory.poke(addr + 96, 0);
        do Memory.poke(addr + 128, 0);
        do Memory.poke(addr + 160, 0);
        do Memory.poke(addr + 192, 0);
        do Memory.poke(addr + 224, 0);
        do Memory.poke(addr + 256, 0);
        do Memory.poke(addr + 288, 0);
        do Memory.poke(addr + 320, 0);
        do Memory.poke(addr + 352, 0);
        do Memory.poke(addr + 384, 0);
        do Memory.poke(addr + 416, 0);
        do Memory.poke(addr + 448, 0);
        do Memory.poke(addr + 480, 0);
        return;
    }

    method void shoot(){                                    //Method used for the shots of the ship TEMPORAL:Increase size method
        do Sys.wait(5);
        let s = y *32;
        let addr = 16384 + s + (x/16) - 512;
        do Memory.poke(addr, 0);
        do Memory.poke(addr + 32, 0);
        do Memory.poke(addr + 64, 128);
        do Memory.poke(addr + 96, 448);
        do Memory.poke(addr + 128, 448);
        do Memory.poke(addr + 160, 448);
        do Memory.poke(addr + 192, 448);
        do Memory.poke(addr + 224, 448);
        do Memory.poke(addr + 256, 448);
        do Memory.poke(addr + 288, 448);
        do Memory.poke(addr + 320, 448);
        do Memory.poke(addr + 352, 448);
        do Memory.poke(addr + 384, 448);
        do Memory.poke(addr + 416, 128);
        do Memory.poke(addr + 448, 0);
        do Memory.poke(addr + 480, 0);
        return;
    }

    // method void moveShipProjectiles(){
    //     let aux = y-16;
    //     while(aux>0){
    //         do eraseShip();
    //         let aux = aux - 1
    //         do shoot();
    //     }
    //     return;
    // }

    method void shield(){                                   //Shield for the ship method
        // if (x){
            
        // }
        return;
    }

    method void moveUp(){                                   //Method used to managed input from the user using upArrow
        do Sys.wait(5);
        if (y>188){
            do eraseShip();
            let y = y - 1;
            do drawShip();
        }
        return;
    }

    method void moveDown(){                                 //Method used to managed input from the user using downArrow
        do Sys.wait(5);
        if (y<220){
            do eraseShip();
            let y = y + 1;
            do drawShip();
        }
        return;
    }

    method void moveLeft(){                                 //Method used to managed input from the user using leftArrow
        do Sys.wait(5);
        if (x>111){
            do eraseShip();
            let x = x - 2;
            do drawShip();
        }
        return;
    }
    
    method void moveRight(){                                //Method used to managed input from the user using rightArrow
        do Sys.wait(5);
        if (x<497){
            do eraseShip();
            let x = x + 2;
            do drawShip();
        }
        return;
    }
}